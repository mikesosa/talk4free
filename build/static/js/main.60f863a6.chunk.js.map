{"version":3,"sources":["components/NavBar/NavBar.js","languages.js","controllers/CreateSessionId.js","controllers/opentok.js","components/ChatRooms/CreateRoomModal/Video.js","components/ChatRooms/CreateRoomModal/CreateRoomModal.js","components/ChatRooms/RoomsList/Room/JoinRoomModal/JoinRoomModal.js","components/ChatRooms/RoomsList/Room/Room.js","components/ChatRooms/RoomsList/RoomsList.js","components/ChatRooms/ChatRooms.js","components/Jumbotron/Jumbotron.js","App.js","serviceWorker.js","index.js"],"names":["NavBar","state","isSignedIn","userName","email","imageUrl","responseGoogle","res","profileObj","name","setState","props","isLoggedIn","logout","this","Navbar","bg","variant","fixed","Container","Brand","href","Nav","className","Link","Fragment","Dropdown","Toggle","id","Image","src","style","width","roundedCircle","Menu","Item","clientId","process","render","renderProps","Button","onClick","disabled","buttonText","onLogoutSuccess","onSuccess","onFailure","cookiePolicy","React","Component","languages","CreateSessionId","a","token","require","sign","iss","ist","iat","Math","floor","Date","now","exp","settings","method","headers","Accept","body","archiveMode","sessionId","fetch","then","json","session_id","console","log","opentok","Video","apiKey","publisherProperties","audioFallbackEnabled","showControls","decreaseUserFromRoom","roomId","url","axios","publisherEventHandlers","streamCreated","event","streamDestroyed","onUpdate","properties","eventHandlers","CreateRoomModal","useState","completed","setCompleted","setSessionId","userToken","setUserToken","userId","setUserId","setRoomId","useForm","register","handleSubmit","errors","getUserId","result","users","data","length","index","getRoomId","ss_id","rooms","saveSession","lang","lvl","level","max_user","maxPeople","active","created_by","error","addUserToRoom","removeUserFromRoom","onSubmit","generateToken","user_token","user_id","room_id","handleClose","Modal","show","onHide","Header","closeButton","Title","Body","Form","Row","Group","as","Col","Label","Control","ref","required","value","Languages","map","key","controlId","justifyContent","type","JoinRoomModal","joined","Badge","Footer","Room","showModal","showCreateRoomModal","alert","room","RoomsList","ChatRooms","getRooms","activerooms","filter","elem","fetched","catch","err","createRoom","Object","keys","Jumbotron","md","App","checkUser","saveUser","username","adm","img","updateLogin","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.60f863a6.chunk.js","sourcesContent":["import React from \"react\";\nimport { GoogleLogin, GoogleLogout } from \"react-google-login\";\nimport \"./NavBar.scss\";\nimport {\n  Container,\n  Navbar,\n  Nav,\n  Button,\n  Dropdown,\n  Image\n} from \"react-bootstrap\";\n\nclass NavBar extends React.Component {\n  state = {\n    isSignedIn: false,\n    userName: \"\",\n    email: \"\",\n    imageUrl: \"\"\n  };\n\n  responseGoogle = res => {\n    if (res.profileObj.name) {\n      this.setState({\n        isSignedIn: true,\n        userName: res.profileObj.name,\n        email: res.profileObj.email,\n        imageUrl: res.profileObj.imageUrl\n      });\n    }\n    this.props.isLoggedIn(this.state);\n  };\n\n  logout = () => {\n    this.setState({\n      isSignedIn: false,\n      userName: \"\",\n      email: \"\",\n      imageUrl: \"\"\n    });\n    this.props.isLoggedIn(this.state);\n  };\n\n  componentDidMount() {\n    // Passing login state\n    this.props.isLoggedIn(this.state);\n  }\n  render() {\n    const checkLogin = () => {\n      if (this.state.isSignedIn) {\n        return (\n          <React.Fragment>\n            <Dropdown>\n              <Dropdown.Toggle\n                className=\"ml-5\"\n                variant=\"primary\"\n                id=\"dropdown-basic\"\n              >\n                {this.state.userName}\n                {this.state.isSignedIn ? (\n                  <Image\n                    src={this.state.imageUrl}\n                    style={{ width: \"35px\" }}\n                    roundedCircle\n                  />\n                ) : (\n                  \"\"\n                )}\n              </Dropdown.Toggle>\n\n              <Dropdown.Menu className=\"ml-5\">\n                <Dropdown.Item>\n                  {\" \"}\n                  <GoogleLogout\n                    clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n                    render={renderProps => (\n                      <Button\n                        variant=\"secondary\"\n                        onClick={renderProps.onClick}\n                        disabled={renderProps.disabled}\n                      >\n                        {\" \"}\n                        Logout\n                      </Button>\n                    )}\n                    buttonText=\"Logout\"\n                    onLogoutSuccess={this.logout}\n                  ></GoogleLogout>\n                </Dropdown.Item>\n              </Dropdown.Menu>\n            </Dropdown>\n          </React.Fragment>\n        );\n      } else {\n        return (\n          <GoogleLogin\n            clientId={process.env.REACT_APP_GOOGLE_CLIENT_ID}\n            render={renderProps => (\n              <React.Fragment>\n                <Button\n                  variant=\"primary\"\n                  className=\"ml-5\"\n                  onClick={renderProps.onClick}\n                  disabled={renderProps.disabled}\n                >\n                  {this.state.isSignedIn ? this.state.userName : \"Sign In\"}\n                </Button>\n              </React.Fragment>\n            )}\n            buttonText=\"Login\"\n            onSuccess={this.responseGoogle}\n            onFailure={this.responseGoogle}\n            cookiePolicy={\"single_host_origin\"}\n          />\n        );\n      }\n    };\n    return (\n      <Navbar bg=\"dark\" variant=\"dark\" fixed=\"top\">\n        <Container>\n          <Navbar.Brand href=\"#home\">Talk4Free</Navbar.Brand>\n          <Nav className=\"ml-auto\">\n            <Nav.Link href=\"#home\">Home</Nav.Link>\n            <Nav.Link href=\"#features\">Features</Nav.Link>\n            <Nav.Link href=\"#pricing\">Pricing</Nav.Link>\n          </Nav>\n          {checkLogin()}\n        </Container>\n      </Navbar>\n    );\n  }\n}\n\nexport default NavBar;\n","const languages = [\n  \"English\",\n  \"French\",\n  \"Spanish\",\n  \"Arabic\",\n  \"Mandarin\",\n  \"Russian\",\n  \"Portuguese\",\n  \"German\",\n  \"Japanese\",\n  \"Hindi\",\n  \"Malay\",\n  \"Persian\",\n  \"Swahili\",\n  \"Tamil\",\n  \"Italian\",\n  \"Dutch\",\n  \"Bengali\",\n  \"Turkish\",\n  \"Vietnamese\",\n  \"Polish\",\n  \"Javanese\",\n  \"Punjabi\",\n  \"Thai\",\n  \"Korean\"\n];\n\nexport default languages;\n","const getJWT = () => {\n  const jwt = require(\"jsonwebtoken\");\n  const secret = process.env.REACT_APP_OPENTOK_API_SECRET; //Replace this with your OpenTok API Secret\n  let token = jwt.sign(\n    {\n      iss: process.env.REACT_APP_OPENTOK_API_KEY, //Replace this with your OpenTok API Key\n      ist: \"project\",\n      iat: Math.floor(Date.now() / 1000), // e.g. 1472691002\n      exp: Math.floor(Date.now() / 1000) + 300 // e.g. 1472691302\n    },\n    secret\n  );\n  return token;\n};\n\nconst CreateSessionId = async () => {\n  const token = getJWT();\n  const settings = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      \"Content-Type\": \"application/x-www-form-urlencoded\",\n      \"X-OPENTOK-AUTH\": token\n    },\n    body: {\n      archiveMode: \"always\",\n      \"p2p.preference\": \"disabled\"\n    }\n  };\n  let sessionId = \"\";\n  try {\n    await fetch(`https://api.opentok.com/session/create`, settings)\n      .then(res => res.json())\n      .then(res => (sessionId = res[0].session_id));\n  } catch (e) {\n    console.log(e);\n  }\n  // console.log(sessionId);\n  return sessionId;\n};\n\nexport default CreateSessionId;\n","const OpenTok = require(\"opentok\");\nconst opentok = new OpenTok(\n  process.env.REACT_APP_OPENTOK_API_KEY,\n  process.env.REACT_APP_OPENTOK_API_SECRET\n);\n\nexport default opentok;\n","import React from \"react\";\nimport { OTSession, OTPublisher } from \"opentok-react\";\nimport axios from \"axios\";\n\nexport default class Video extends React.Component {\n  state = {\n    apiKey: this.props.apiKey,\n    sessionId: this.props.sessionId,\n    token: this.props.token\n  };\n\n  publisherProperties = {\n    audioFallbackEnabled: false,\n    showControls: false\n  };\n\n  /* ====================== decrease one user ============================*/\n  decreaseUserFromRoom = async roomId => {\n    const url = `https://talk4free.live/api/rooms/decrease/${roomId}`;\n    try {\n      await axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  publisherEventHandlers = {\n    streamCreated: event => {\n      console.log(\"Publisher stream created!\");\n    },\n    streamDestroyed: async event => {\n      // console.log(this.props);\n      await this.decreaseUserFromRoom(this.props.roomId);\n      this.props.onUpdate();\n      console.log(\"Publisher stream destroyed!\");\n    }\n  };\n\n  render() {\n    return (\n      <OTSession\n        apiKey={this.state.apiKey}\n        sessionId={this.state.sessionId}\n        token={this.state.token}\n      >\n        <OTPublisher\n          properties={this.publisherProperties}\n          eventHandlers={this.publisherEventHandlers}\n        />\n      </OTSession>\n    );\n  }\n}\n","import React, { useState } from \"react\";\nimport { Modal, Button, Form, Col } from \"react-bootstrap\";\nimport Languages from \"../../../languages\";\nimport { useForm } from \"react-hook-form\";\nimport CreateSessionId from \"../../../controllers/CreateSessionId\";\nimport opentok from \"../../../controllers/opentok\";\nimport Video from \"./Video\";\n// import { OTSession, OTPublisher, OTStreams, OTSubscriber } from \"opentok-react\";\nimport axios from \"axios\";\n\nfunction CreateRoomModal(props) {\n  const [completed, setCompleted] = useState(false);\n  const [sessionId, setSessionId] = useState(null);\n  const [userToken, setUserToken] = useState(null);\n  const [userId, setUserId] = useState(\"\");\n  const [roomId, setRoomId] = useState(\"\");\n  const { register, handleSubmit, errors } = useForm();\n\n  /* ==================================== FUNCTIONS ============================================*/\n\n  // =============== Get user Id ==============================\n  const getUserId = async () => {\n    const result = await axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/users\"\n    });\n    const users = result.data;\n    if (users.length > 0) {\n      for (let index = 0; index < users.length; index++) {\n        if (users[index].email === props.email) {\n          return users[index].id;\n        }\n      }\n    }\n    return null;\n  };\n\n  // ============= Get room Id ====================================\n  const getRoomId = async ss_id => {\n    const result = await axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/rooms\"\n    });\n    const rooms = result.data;\n    if (rooms.length > 0) {\n      for (let index = 0; index < rooms.length; index++) {\n        if (rooms[index].session_id === ss_id) {\n          return rooms[index].id;\n        }\n      }\n    }\n    return null;\n  };\n\n  // =================== Save Room in DB =================================\n  // Save into db\n  const saveSession = async (data, session_id, userId) => {\n    try {\n      axios({\n        method: \"POST\",\n        url: \"https://talk4free.live/api/rooms\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        data: {\n          session_id: session_id,\n          lang: data.lang,\n          lvl: data.level,\n          max_user: data.maxPeople,\n          active: true,\n          created_by: userId\n        }\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ====================== Add User to Room =============================\n  const addUserToRoom = async (roomId, userId) => {\n    const url = `https://talk4free.live/api/users/join/${roomId}/${userId}`;\n    try {\n      axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    // This will update the rooms list on the frontend\n    props.onUpdate();\n  };\n\n  // ===================== Remove User from Room ============================\n  const removeUserFromRoom = async () => {\n    // console.log(await getUserId());\n    const url = `https://talk4free.live/api/users/out/${roomId}/${userId}`;\n    try {\n      await axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  /* ========================================== CALLING FUNCTIONS =============================================*/\n  const onSubmit = async data => {\n    const session_id = await CreateSessionId();\n    const user_token = await opentok.generateToken(session_id);\n    const user_id = await getUserId();\n    await saveSession(data, session_id, user_id);\n    const room_id = await getRoomId(session_id);\n    await addUserToRoom(room_id, user_id);\n    // Setting states\n    setSessionId(session_id);\n    setUserToken(user_token);\n    setUserId(user_id);\n    setRoomId(room_id);\n    setCompleted(true);\n  };\n\n  const handleClose = async () => {\n    // if there is a session goin on\n    if (completed) {\n      await removeUserFromRoom();\n      console.log(\"adentro\");\n      props.handleClose();\n      setCompleted(false);\n      // If no sessions just close the modal\n    } else {\n      props.handleClose();\n    }\n  };\n  // Rendering the form or video in the modal\n  const checkStatus = () => {\n    if (!completed) {\n      return (\n        <Form onSubmit={handleSubmit(onSubmit)}>\n          <Form.Row>\n            <Form.Group as={Col}>\n              <Form.Label>Language</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"lang\"\n                ref={register({ required: true })}\n              >\n                <option value=\"\">Choose a language...</option>\n                {Languages.map((lang, index) => {\n                  return (\n                    <option value={lang} key={index}>\n                      {lang}\n                    </option>\n                  );\n                })}\n              </Form.Control>\n              {errors.lang && <small>Please select a language</small>}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row>\n            <Form.Group as={Col} controlId=\"formGridEmail\">\n              <Form.Label>Level</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"level\"\n                ref={register({ required: true })}\n              >\n                <option value=\"\">Choose...</option>\n                <option value=\"Beginner\">Beginner</option>\n                <option value=\"Intermidiate\">Intermediate</option>\n                <option value=\"Advanced\">Advanced</option>\n              </Form.Control>\n              {errors.level && <small>Please choose a level</small>}\n            </Form.Group>\n            <Form.Group as={Col} controlId=\"formGridEmail\">\n              <Form.Label>Max People</Form.Label>\n              <Form.Control\n                as=\"select\"\n                name=\"maxPeople\"\n                ref={register({ required: true })}\n              >\n                <option value=\"\">Choose...</option>\n                <option value=\"2\">2</option>\n                <option value=\"3\">3</option>\n                <option value=\"4\">4</option>\n                <option value=\"5\">5</option>\n              </Form.Control>\n              {errors.maxPeople && <small>Please select a number</small>}\n            </Form.Group>\n          </Form.Row>\n          <Form.Row style={{ justifyContent: \"flex-end\" }}>\n            <Button variant=\"secondary\" onClick={props.handleClose}>\n              Cancel\n            </Button>\n            <Button variant=\"primary\" type=\"submit\" className=\"ml-3 \">\n              Join Room\n            </Button>\n          </Form.Row>\n        </Form>\n      );\n    } else {\n      return (\n        <Video\n          apiKey={process.env.REACT_APP_OPENTOK_API_KEY}\n          sessionId={sessionId}\n          token={userToken}\n          roomId={roomId}\n          onUpdate={props.onUpdate}\n        />\n      );\n    }\n  };\n  return (\n    <Modal show={props.show} onHide={handleClose}>\n      <Modal.Header closeButton>\n        <Modal.Title>Create a Room</Modal.Title>\n      </Modal.Header>\n      <Modal.Body>{checkStatus()}</Modal.Body>\n    </Modal>\n  );\n}\n\nexport default CreateRoomModal;\n","import React from \"react\";\nimport { Modal, Button, Badge } from \"react-bootstrap\";\nimport { OTSession, OTPublisher, OTStreams, OTSubscriber } from \"opentok-react\";\nimport opentok from \"../../../../../controllers/opentok\";\nimport axios from \"axios\";\n\nclass JoinRoomModal extends React.Component {\n  state = {\n    joined: false,\n    userId: null,\n    roomId: null,\n    userToken: null\n  };\n\n  /* ==================================== FUNCTIONS ============================================*/\n\n  // =============== Get user Id ==============================\n  getUserId = async () => {\n    const result = await axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/users\"\n    });\n    console.log(this.props.email);\n    const users = result.data;\n    if (users.length > 0) {\n      for (let index = 0; index < users.length; index++) {\n        if (users[index].email === this.props.email) {\n          return users[index].id;\n        }\n      }\n    }\n    return null;\n  };\n\n  // ====================== Add User to Room =============================\n  addUserToRoom = async (roomId, userId) => {\n    let url = `https://talk4free.live/api/users/join/${roomId}/${userId}`;\n    try {\n      await axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n      url = `https://talk4free.live/api/rooms/increase/${roomId}`;\n      await axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // ====================== Remove User from Room =============================\n  decreaseUserFromRoom = async () => {\n    const url = `https://talk4free.live/api/rooms/decrease/${this.state.roomId}`;\n    try {\n      await axios({\n        method: \"PUT\",\n        headers: {\n          token: process.env.REACT_APP_ZAFRA_KEY\n        },\n        url: url\n      });\n    } catch (error) {\n      console.log(error);\n    }\n    this.props.handleClose();\n  };\n\n  // ============= Get room Id ====================================\n  getRoomId = async ss_id => {\n    const result = await axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/rooms\"\n    });\n    const rooms = result.data;\n    if (rooms.length > 0) {\n      for (let index = 0; index < rooms.length; index++) {\n        if (rooms[index].session_id === ss_id) {\n          return rooms[index].id;\n        }\n      }\n    }\n    return null;\n  };\n\n  onSubmit = async () => {\n    console.log(\"Joining...\");\n    const user_token = await opentok.generateToken(this.props.sessionId);\n    const user_id = await this.getUserId();\n    const roomId = await this.getRoomId(this.props.sessionId);\n    console.log(\"esto es lo que llega\", roomId, user_id);\n    await this.addUserToRoom(roomId, user_id);\n    this.setState({\n      joined: true,\n      userToken: user_token,\n      userId: user_id,\n      roomId: roomId\n    });\n  };\n\n  render() {\n    const handleRender = () => {\n      if (this.state.joined) {\n        return (\n          <React.Fragment>\n            <OTSession\n              apiKey={process.env.REACT_APP_OPENTOK_API_KEY}\n              sessionId={this.props.sessionId}\n              token={this.state.userToken}\n            >\n              <OTPublisher />\n              <OTStreams>\n                <OTSubscriber />\n              </OTStreams>\n            </OTSession>\n          </React.Fragment>\n        );\n      } else {\n        return <p>Woohoo, you're aboout to join this call!</p>;\n      }\n    };\n    return (\n      <Modal show={this.props.show} onHide={this.decreaseUserFromRoom}>\n        <Modal.Header closeButton>\n          <Modal.Title>\n            {\" \"}\n            <p>\n              <Badge variant=\"warning\">{this.props.lang}</Badge>\n              {this.props.level}\n            </p>\n          </Modal.Title>\n        </Modal.Header>\n        <Modal.Body>{handleRender()}</Modal.Body>\n        <Modal.Footer>\n          <Button variant=\"secondary\" onClick={this.props.handleClose}>\n            Cancel\n          </Button>\n          <Button variant=\"primary\" onClick={this.onSubmit}>\n            Join Call\n          </Button>\n        </Modal.Footer>\n      </Modal>\n    );\n  }\n}\n\nexport default JoinRoomModal;\n","import React from \"react\";\n// import ParticipantsList from \"./ParticipantsList/ParticipantsList\";\nimport JoinRoomModal from \"./JoinRoomModal/JoinRoomModal\";\nimport { Row, Col, Button, Badge } from \"react-bootstrap\";\n\nclass Room extends React.Component {\n  state = {\n    showModal: false\n  };\n\n  showCreateRoomModal = () => {\n    if (this.props.isLoggedIn) {\n      this.setState({\n        showModal: !this.state.showModal\n      });\n    } else {\n      alert(\"Please sign in\");\n    }\n  };\n\n  render() {\n    return (\n      <Col className=\"text-center room-box\">\n        <Row className=\"room-box-header\">\n          <p>\n            <Badge variant=\"warning\">{this.props.room.lang}</Badge>\n            {this.props.room.lvl}\n          </p>\n        </Row>\n        <Row className=\"room-box-body\">\n          {/* <ParticipantsList participants={this.props.room.max_user} /> */}\n        </Row>\n        <Row className=\"room-box-footer\">\n          <Button variant=\"primary\" onClick={this.showCreateRoomModal}>\n            <i className=\"material-icons\">perm_phone_msg</i>Join now!\n          </Button>\n          <JoinRoomModal\n            show={this.state.showModal}\n            handleClose={this.showCreateRoomModal}\n            lang={this.props.room.lang}\n            level={this.props.room.lvl}\n            sessionId={this.props.room.session_id}\n            email={this.props.email}\n          />\n        </Row>\n      </Col>\n    );\n  }\n}\n\nexport default Room;\n","import React from \"react\";\nimport Room from \"./Room/Room\";\nimport { Row } from \"react-bootstrap\";\n\nclass RoomsList extends React.Component {\n  render() {\n    return (\n      <React.Fragment>\n        <Row className=\"justify-content-between\">\n          {this.props.rooms.data.map((room, index) => {\n            return (\n              <Room\n                key={index}\n                room={room}\n                isLoggedIn={this.props.isLoggedIn}\n                email={this.props.email}\n              />\n            );\n          })}\n        </Row>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default RoomsList;\n","import React from \"react\";\nimport { Container, Button } from \"react-bootstrap\";\n// import apiTest from \"../../apiTest\";\nimport CreateRoomModal from \"./CreateRoomModal/CreateRoomModal\";\nimport RoomsList from \"./RoomsList/RoomsList\";\nimport axios from \"axios\";\n\nclass ChatRooms extends React.Component {\n  state = {\n    rooms: \"\",\n    showCreateRoomModal: false\n  };\n\n  getRooms = () => {\n    axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/rooms\"\n    })\n      .then(res => {\n        let activerooms = res.data.filter(elem => elem.active !== 0);\n        res.data = activerooms;\n        this.setState({\n          rooms: res,\n          fetched: true\n        });\n      })\n      .catch(err => console.log(err));\n  };\n\n  componentDidMount() {\n    this.getRooms();\n  }\n\n  createRoom = () => {\n    // Check if user is logged\n\n    if (this.props.isLoggedIn) {\n      // If logged show modal\n      this.setState({\n        showCreateRoomModal: !this.state.showCreateRoomModal\n      });\n    } else {\n      alert(\"Please Sing In\");\n    }\n  };\n\n  render() {\n    const fetchRooms = () => {\n      // If there are rooms render roomslist if not... show a message\n      if (\n        typeof this.state.rooms === \"object\" &&\n        Object.keys(this.state.rooms.data).length > 0\n      ) {\n        return (\n          <RoomsList\n            rooms={this.state.rooms}\n            isLoggedIn={this.props.isLoggedIn}\n            email={this.props.email}\n          />\n        );\n      } else {\n        return (\n          <p className=\"text-center\">No rooms available, please create one!</p>\n        );\n      }\n    };\n    return (\n      <section>\n        <Container>\n          <div className=\"px-3 py-3 pt-md-5 pb-md-4 mx-auto text-center\">\n            <h1 className=\"display-4\">Chat Rooms</h1>\n            <p className=\"lead\">\n              Quickly build an effective pricing table for your potential\n              customers with this Bootstrap example. It’s built with default\n              Bootstrap components and utilities with little customization.\n            </p>\n            <Button variant=\"primary\" onClick={this.createRoom}>\n              Create Room\n            </Button>\n            <CreateRoomModal\n              show={this.state.showCreateRoomModal}\n              handleClose={this.createRoom}\n              email={this.props.email}\n              onUpdate={this.getRooms}\n            />\n          </div>\n          {fetchRooms()}\n        </Container>\n      </section>\n    );\n  }\n}\n\nexport default ChatRooms;\n","import React from \"react\";\nimport \"./Jumbotron.scss\";\nimport { Container, Row, Col } from \"react-bootstrap\";\n\nconst Jumbotron = () => {\n  return (\n    <section className=\"jumbotron\">\n      <Container>\n        <Row className=\"mt-5\">\n          <Col md=\"6\">\n            <h1>Practice lenguages at anytime.</h1>\n            <p className=\"lead mt-5 mb-5\">\n              Something short and leading about the collection below—its\n              contents, the creator, etc. Make it short and sweet, but not too\n              short so folks don’t simply skip over it entirely.\n            </p>\n            <p>\n              <a href=\"#test\" className=\"btn btn-primary my-2\">\n                Main call to action\n              </a>\n              <a href=\"#test\" className=\"btn btn-secondary my-2 ml-4\">\n                Secondary action\n              </a>\n            </p>\n          </Col>\n          <Col md=\"6\" className=\"text-center\">\n            <h2>Form</h2>\n          </Col>\n        </Row>\n      </Container>\n    </section>\n  );\n};\n\nexport default Jumbotron;\n","import React from \"react\";\nimport NavBar from \"../src/components/NavBar/NavBar\";\nimport ChatRooms from \"./components/ChatRooms/ChatRooms\";\nimport Jumbotron from \"./components/Jumbotron/Jumbotron\";\n// import { Container } from \"react-bootstrap\";\nimport axios from \"axios\";\nimport \"./App.scss\";\n\nclass App extends React.Component {\n  state = {\n    isLoggedIn: false,\n    userName: \"\",\n    email: \"\",\n    imageUrl: \"\"\n  };\n\n  checkUser = async () => {\n    const result = await axios({\n      method: \"GET\",\n      headers: {\n        token: process.env.REACT_APP_ZAFRA_KEY\n      },\n      url: \"https://talk4free.live/api/users\"\n    });\n    const users = result.data;\n    if (users.length > 0) {\n      for (let index = 0; index < users.length; index++) {\n        if (users[index].email === this.state.email) {\n          return true;\n        }\n      }\n    }\n    return false;\n  };\n\n  saveUser = async () => {\n    if (this.state.email !== \"\") {\n      const alreadyExist = await this.checkUser();\n      if (!alreadyExist) {\n        axios({\n          method: \"POST\",\n          url: \"https://talk4free.live/api/users\",\n          headers: {\n            token: process.env.REACT_APP_ZAFRA_KEY\n          },\n          data: {\n            email: this.state.email,\n            username: this.state.userName,\n            active: true,\n            adm: false,\n            img: this.state.imageUrl\n          }\n        });\n      }\n    }\n  };\n  updateLogin = res => {\n    this.setState({\n      isLoggedIn: res.isSignedIn,\n      userName: res.userName,\n      email: res.email,\n      imageUrl: res.imageUrl\n    });\n    this.saveUser();\n  };\n  render() {\n    return (\n      <React.Fragment>\n        <header className=\"mb-auto\">\n          <NavBar isLoggedIn={this.updateLogin} />\n        </header>\n        <Jumbotron />\n        <ChatRooms\n          isLoggedIn={this.state.isLoggedIn}\n          email={this.state.email}\n        />\n        {/* <footer className=\"mt-auto\">\n          <Container>\n            <p>Hello</p>\n          </Container>\n        </footer> */}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./custom.scss\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}